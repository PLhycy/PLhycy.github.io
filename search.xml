<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html和css部分知识点</title>
      <link href="/post/b3fa3e65.html"/>
      <url>/post/b3fa3e65.html</url>
      
        <content type="html"><![CDATA[<!-- 实体的语法：     &实体的名字；      &nbsp；空格      &gt; 大于      &lt; 小于  --><pre><code>&lt;!--块元素和行内元素--&gt;&lt;!--       块元素： 对页面进行布局；       行内元素：对文字进行包裹--&gt;&lt;!--    &lt;blockquote&gt;标签： 表示长引用--&gt;</code></pre> <!--        <ul></ul> 标签： 是无序标签        <ol></ol> 标签： 是有序标签        <li></li>  标签： 是列表项        <br> ： 表示换行        <em> : 表示语音语调的加重        <strong>: 表示强调    --><pre><code>&lt;!--定义列表：      使用dl标签创建定义列表      dt标签：   表示定义的内容      dd标签： 对内容进行解释说明。--&gt;&lt;!--    内联框架：    &lt;iframe src=&quot;http://plhycy.com&quot; frameborder=&quot;0&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/iframe&gt;    --&gt;&lt;!--在开发中不要使用内联样式&lt;p style = &quot;color: blue; font-size: 60px;&quot;&gt;落霞与孤鹜齐飞，秋水共长天一色&lt;/p&gt;    --&gt;&lt;!--      使用外部样式表引入css。（推荐）      选择器： 元素选择器，id选择器，类选择器，通配选择器，交集选择器，并集选择器       元素选择器：           语法： P&#123;&#125;       id选择器：           语法： #id属性值       类选择器：           语法： .class属性值       通配选择器：           作用： 选中网页中所有的元素           语法： *       交集选择器：           语法： 选择器1选择器2选择器3选择器4........           注意:  如果选择器中有元素选择器，必须元素选择器作为开头       并集选择器：          语法：   选择器1，选择器2       关系选择器：           子元素选择器，后代元素选择器，兄弟选择器       属性选择器：       [属性]：选择指定属性的元素       [属性=属性值] ： 选择指定的属性和属性值的元素       [属性^=属性值]： 选择属性值以指定值开头的元素       [属性￥=属性值]： 选择属性值以指定值结尾的元素       [属性*=属性值]： 选择属性中含有某值的元素       伪类选择器：       伪元素选择器：       超链接的伪类：：linK,:vited,:hover,:active       选择器的权重：           1、比较优先级时，需要将所有选择器的优先级进行相加计算，优先级越高，则越优先显示。           2、当计算的优先级相同时，应用靠下的样式           3、选择器的累加不会超过其最大的数量级，类选择器在高也比id选择器低       边框（border）：         要设置边框，必须设置三个样式：              1、边框宽度              2、边框颜色              3、边框样式             border的简写属性：可以同时设置四个边框的样式，没有顺序       内边距 (padding)：             同上       垂直方向的布局：               overflow(处理子元素溢出的情况)：                           1、visible(默认值)  子元素会从父元素中溢出                           2、 hidden:  溢出的部分不会显示                           3   auto 根据需求生成滚动条                           4、 scroll 生成两个滚动条       外边距的折叠：              1、如果两个外边距都正值，则会取较大的值              2、如果两个外边距一正一负，则会进行相加              3、如果两个外边距都是负值，则会取绝对值较大的数      display: 用来设置元素的类型          可选值：              inline： 将元素设置为行内元素              block:   将元素设置为块元素              inline-block:   将元素设置为行内块元素                      行内块  既可以设置宽度，又可以设置高度              table:  将元素设置成表格              none: 将元素隐藏    visibility:  用来设置元素的状态       可选值：           visible :   正常显示           hidden:  元素在页面中隐藏，不显示，但是依然会占据位置    颜色属性：        rgb:        rgba:     十六进制设置颜色：   练习：    **   1、图片的列表（京东）  **    **   2、京东左侧的导航条  **    **   3、网易新闻的右侧    **   去除下划线：    list-style: none;   盒子的大小：         盒子可见框的大小由内容区，内边距和边框决定。   box-sizing: 用来设置width和height的作用        可选值：             1、content-box: 默认值，宽度和高度用来设置内容区的大小             2、border-box: 宽度和高度用来设置整个盒子可见框的大小 轮廓：       outline: 轮廓不会影响可见框的大小。 阴影：     box-shadow:        可选值：           1、第一个值：设置水平偏移量  正值向右移动，负值向左移动           2、第二个值：设置垂直偏移量  正值向下移动  负值向上移动           3、第三个值：设置阴影的模糊半径           4、第四个值：设置阴影的颜色 圆角：     border-radius:  用来设置圆角   圆角设置的是圆的半径大小     border-top-left-radius:     border-top-rright-radius;     border-bottom-left-radius;     border-bottom-right-radius;    BFC:  用来解决高度塌陷的问题  *******        1、开启BFC的元素不会被浮动元素所覆盖        2、开启BFC的元素子元素和父元素的外边距重叠        3、开启BFC的元素可以包含浮动元素。   可以通过一些特殊方式开启BFC：         1、设置浮动         2、将元素变成行内块元素         3、设置overflow属性               通常设置 overflow: hidden 来设置BFC，  clear:   用来解决高度塌陷的问题  *******       作用：清除浮动元素对当前元素的影响；      可选值：        1、left： 清除左侧浮动元素对当前元素的影响        2、right：清除右侧浮动元素对当前元素的影响        3、both； 清楚两侧中最大影响的那侧。   还可以利用伪元素解决高度塌陷的问题：           .box1::after&#123;              content：“”              display: block;              clear: both;    &#125;    clearfix：这个样式可以同时解决高度塌陷和外边距重叠的问题：        语法：           .clearfix::before,             .clearfix::after&#123;                 content;&quot; &quot;;                 display: table;                 clear: both;   定位       可选值：           static:  默认值 元素处于静止，没有开启定位           relative: 元素开启了相对定位       相对定位：           当元素的position的属性值设置为relative时则开启了相对定位      相对定位的特点：           1、元素开启了相对定位，如果不设置偏移量就不会发生任何变化。           2、相对定位是参照元素在文档流的位置进行定位的           3、相对定位会提高元素的层级           4、相对定位不会改变元素的属性，块还是块，行内还是行内           5、相对定位不会使元素脱离文档流     偏移量：         top:              定位元素和定位位置上边的距离         bottom:              定位元素和定位位置下边的距离              定位元素垂直方向的位置由top和bottom两个属性决定                  通常情况只会使用一个         left:              定位元素和定位位置左边的距离         right:              定位元素和定位位置右边的距离              定位元素水平方向的位置由left和right两个属性决定                  通常情况同上    绝对定位：             当元素的position的属性值设置为absolute时则开启了绝对定位      绝对定位的特点：           1、元素开启了绝对定位，如果不设置偏移量就不会发生任何变化。           2、绝对定位会提高元素的层级           3、绝对定位会改变元素的性质           4、绝对定位会使元素脱离文档流           5、绝对元素是相对于包含块进行定位的    绝对元素的包含块：         包含块就是离它最近的开启了定位的祖先块元素             如果所有的祖先元素都没有开启定位则根元素就是它的包含块    html（根元素，初始包含块）    固定定位：             当元素的position的属性值设置为fixed时则开启了固定定位      固定定位的特点：         固定定位也是一种绝对定位，固定定位的特点大部分和绝对定位是一样的               唯一不同的是固定定位是相对于网页的视口进行定位的               固定定位的元素不会随滚动条滚动    粘滞定位：          当元素的position的属性值设置为sticky时则开启了粘滞定位         粘滞定位的特点和相对定位的特点基本一致    绝对定位元素的位置：          水平布局：left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = 包含块内容区的宽度        当我们开启了绝对定位后：                 水平方向的布局等式需要加上 left 和 right 两个属性                  此时规则和之前一样                  当发生过度约束时：                        如果这9个值中没有auto，则会自动调整right的值                        如果有auto，则会调整auto的值             可设置auto的值：                 margin left right width          因为left和right的值默认是auto，所以如果不知道left和right，           则会自动调整这两个值       垂直方向：         top + margin-top/bottom + border-top/bottom + padding-top/bottom + height + bottom       设置元素居中：            top: 0;            bottom: 0;            left: 0;            right: 0;    对于开启了定位的元素，可以通过z-index属性来设置元素的层级        z-index需要一个整数作为参数，值越大元素的层级越高           元素的层级越高越优先显示     如果元素的层次一样，则优先显示靠下的元素    祖先元素的层次在高也不会盖住子元素    轮播图的练习：             字体族：        @font-face:              指定字体的名字            font-family:               服务器中字体的的路径            src: url()       问题：          1、加载速度          2、版权          3、字体格式    行高：             font:  可以设置字体的所有相关的属性         语法：              font: 字体大小/行高 字体族              行高 可以省略不写 如果不写就是默认值         字体的相关属性:               font-size:               font-family:               字重： 字体的重量：               font-weight:                     可选值：                              normal  默认值                              bold     加粗              字体的样式：              font-style:                      可选值：                              normal  默认值                              italic  斜体                                            文本的水平和垂直对齐：                    text-align: 文本的水平对齐                            可选值：                               left:左侧对齐                               right:右侧对齐                               center: 居中                               justify: 两端对齐                    vertical-align: 文本的垂直对齐                          可选值：                                baseline: 基线对齐                                top；顶部对齐                                bottom: 底部对齐                                middle： 居中对齐          text-decoration: 设置文本修饰                     可选值：                      none: 什么都没有                      underline: 下划线                      overline: 上划线                      line-through: 删除线        white-space:设置网页如何处理空白                 可选值：                  normal: 正常                  norwap: 不换行                  pre: 保留空白            .box&#123;                width: 100px;                white-space: norwap;                overflow: hidden;                text-overflow; ellipsis;     背景:        background-color:        background-repaet:        background-image:        background-clip:        background-size:        background-attachment:    线性渐变：        渐变是图片   需要通过background-image来设置        我们可以指定渐变的方向：                 to top                 to left                 to bottom                 to right                 deg 表示度数                 turn 表示圈        linear-gradient       repeating-linear-graident 可以平铺的渐变    径向渐变（放射性的效果）：       background-image:  radial-gradient();          默认情况下径向渐变的形状根据元素的形状计算的           正方形   -----   圆形           长方形   -----   椭圆        我们也可以手动指定径向渐变的大小        circle         ellipse       -- 也可以指定渐变的位置            语法  ：   radial-gradient(大小  at 位置，颜色 位置)       位置：             可选值：                 bottom;                 top;                 left;                 right;    iconfont图标库的使用：             表格：         使用table表示表格    例：        &lt;table&gt;             使用tr表示行，有几个tr就有几行           &lt;tr&gt;                       在tr中使用td表示单元格，有几个td就有几个单元格                        colspan :横向的合并单元格               &lt;td colspan=&quot;2&quot; &gt;&lt;/td&gt;           &lt;/tr&gt;           &lt;tr&gt;                    rowspan:                       纵向的合并单元格                 &lt;td rowspan=&quot;2&quot;&gt;&lt;/td&gt;          &lt;/tr&gt;           &lt;tr&gt;&lt;/tr&gt;           &lt;tr&gt;&lt;/tr&gt;    &lt;/table&gt;    表单;         使用form来创建一个表单    form属性：        action: 表单要提交的服务器的地址    文本框：          &lt;input type=&quot;text&quot;&gt;  注意：数据要提交到服务器中，必须要设置name属性值    提交按钮：         在提交按钮中可以设置value属性值    如果设置成注册  按钮就比变成注意，其他同理         &lt;input type=&quot;submit&quot;&gt;     密码框：       &lt;input type=&quot;possword&quot;&gt;  也可以设置name属性值     单选按钮：       checked：默认选中最后一个按钮       &lt;input type=&quot;radio&quot; name=&quot;&quot;&gt; name要相同  可以设置value属性     多选按钮：       &lt;input type=&quot;checkbox&quot; name=&quot;&quot;&gt; 同上    可以设置value属性    下拉列表：        &lt;select name=&quot;&quot;&gt;       &lt;option value=&quot;&quot;&gt;可以设置value属性   也可以写selected   selectde属性默认选中一个下拉项    &lt;/select&gt;    autoccomplete:          关闭自动补全    readonly： 将表单设置成只读，数据可以提交    disabled:  将表单设置成禁用，数据不可以提交    autofocus:  将表单设置成自动获取焦点    &lt;input type=&quot;button&quot;&gt;    普通按钮  不可点击    &lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;   提交按钮    &lt;button type=&quot;reset&quot;&gt;&lt;/button&gt;  重置按钮    &lt;button type=&quot;button&quot;&gt;&lt;/button&gt;  按钮         过渡效果：        通过过渡可以指定一个属性发生变化时切换方式        可以提升用户体验    transition-property: 指定要执行过渡的属性       多个属性之间使用 ，隔开       如果所有属性都需要过渡，则使用all关键词      大部分属性都支持过渡效果，但是过渡必须从一个有效值到另一个有效值    transition-duration: 指定过渡效果的持续时间    时间单位： s 和 ms      1s = 1000ms    transition-timing-function: 过渡的时序函数    指定过渡的执行的方式：        可选值：        1、esse: 慢速开始，先加速，在减速        2、linear: 匀速运动        3、ease-in: 加速运动        4、ease-out： 减速运动        5、 ease-in-out: 先加速，后减速        steps()： 分布执行过渡效果        可以设置一个第二个值:                end: 在时间结束时执行过渡                start： 在时间开始时执行过渡        举例：             transiton-timing-function: steps(2.end)； 分两个执行           transition-delay: 过渡效果的延迟，等待一段时间后开始执行过渡     transition: 可以同时设置过渡效果的所有属性，只有一个要求，如果有两个时间，第一个是执行的时间，第二个是延迟。    动画：         动画和过渡类似，都是可以实现动态的效果          不同的是过渡需要在某个属性发生变化时才会触发          动画可以自动触发动态效果     animation-name; 要对当前元素生效的关键帧的名字           animation-duration: 动画的执行时间     animation-delay:   动画的延迟     animation-timing-function: 动画的时序函数（跟过渡的使用方式一样）           animation-iteration-count: 动画的执行次数         可选值：             infinite:  无限执行    animation-direction: 动画执行的方向         可选值：            normal   默认值    从from 到 to            reverse   从  to 到 from运行            alternate:  重复执行动画时，反向执行            alternate-reverse: 从 to 到 from 运行 重复执行动画时反向执行                 animation-play-state:  设置动画的执行状态            可选值：             1、 running   动画执行             2、 paused    动画暂停              animation-fill-mode  动画的填充模式       可选值：         1、 none 默认值   动画执行完毕，元素回到原来的位置         2、 forwards  动画执行完毕，元素会停止在结束的位置         3、 backwards  动画延迟等待时元素就会处于开始位置         4、both 结合了forwards和backwards           举例：       @keyframes  test&#123;          from:表示动画的开始位置，也可以使用0%          from&#123;              &#125;          to:表示动画的结束位置，也可以使用100%          to&#123;           &#125;    &#125;    变形：         通过CSS来改变元素的形状和位置         变形不会影响到页面的布局    transform: 用来设置元素的变形效果             transform: translateX(); 沿着X的方向平移        transform: translateY(); 沿着Y的方向平移        transform: translateZ(); 沿着Z的方向平移          这种居中方式，只适用于元素的大小确定    top: 0;    left: 0;    bottom: 0;    right: 0;    margin: auto;     Z轴平移：          调整元素在Z轴的位置，正常情况就是调整元素和人眼之间的距离            距离越大，元素离人越近         Z轴平移属于立体效果(近大远小)，默认情况网页是不支持透视的，如果想要看见效果，需要设置视距    视距：  人眼距离网页的距离        perspective: 800px;    旋转：        通过旋转可以使元素沿着 X Y Z旋转指定的角度        transform: rotateX(90deg);        transform: rotateY(1turn);        transform: rotatez(45deg);        turn: 表示圈        deg: 表示度             是否显示元素的背面：         backface-visibility:              可选值；                  visible: 默认值 显示                  hidden:   隐藏   缩放：        scale:  对元素进行缩放的函数          可选值：                scaleX(); 水平方向缩放                scaleY();  竖直方向缩放                scale();    双方向缩放   举例：     transform: scaleX(2);        --&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读书感悟</title>
      <link href="/post/484a78cf.html"/>
      <url>/post/484a78cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="云边有个小卖部"><a href="#云边有个小卖部" class="headerlink" title="云边有个小卖部"></a>云边有个小卖部</h1><p>​        云边有个小卖部，货架堆着岁月和夕阳，背后就是山，梦里小镇落雨，开花，起风，挂霜，甚至扬起烤红薯的香气。每个墙角都能听见人们的说笑。老人靠着躺椅假装睡着，小孩子偷走一块糖，送给他喜欢的姑娘。泪水在几点钟落地，飞鸟亦将要去何方。人们聚和离，云朵来又往。讲故事的人，总有一个故事牛说不愿意讲，时光飞逝，悄悄话变成了纸张。<br>​        在《云边有个小卖部》这本书中，张嘉佳带我们来到了一个带有神秘色彩的小村子，云边村，在那里，我们可以找到灵魂深处的感动。<br>​        故事中的刘十三，酷爱读书，立志考清华，然而现实却与他开玩笑；到大城市奔波奋斗，却屡屡碰壁。刘十三虽然一次次受到打击，可他却没放弃，一次又一次告诉自己”熬过去不就好了”。这很像我们中的许多人，学习又苦又累，而我们从不放弃，一次又一次的前进。是的，我们活着并不能改变世界，但足够成就独一无二的自己！<br>​        女主人公程霜，他教会了我们如何坚强，如何让生命更有韧劲。刘十三和程霜的故事告诉我们：人的一生中都会有过客，但无论是好是坏，他们都在不断改变着我们，使我们成为更好的自己。”蝴蝶死在路旁，云边留着念想。有些人刻骨铭心但没几年也终究会忘，有些人则平淡如水，无论生死都陪在你身边。<br>​        “这本书写给我们每个人心中的山和海，写给离开我们的人，写给陪伴我们的人。”张嘉佳用5年时间呕心沥血地写成这部小说是想告诉青少年们：”当我们追求某样东西的时候，就必须放弃另一样东西，这就是成长。在成长路上，你失去时，总会有一些弥足珍贵的感受。”<br>​        这是一本很治愈的小说，感谢每一个出现的人，感谢每一个伤害你的人，是他们，让你成为了一个更好的自己！<br>        本人对书中的一段话做评价：人和人之间最舒服的关系 ，是可以一直不说话 ，也可以随时说话，我觉得这里的可以随时说话不太对，当两个人很长时间不联系的话，下一次的说话可能就是敷衍(这里的敷衍指的是随便应和几句)，也可能是本来就不太跟你说话。我的理解就是这样。</p><h1 id="活着"><a href="#活着" class="headerlink" title="活着"></a>活着</h1><pre><code>    徐福贵这悲剧的一生诠释了什么是真正的&quot;活着&quot;，即使苦到怨天怨地、即使拼尽全力挣扎也要继续活下去，只是为了活着度过这一生。站在现在这个时代的节点，大家都是过着比以前要好上千倍万倍的生活，但是总有人轻视自己的生命，选择自残或者自杀，而反观以前那个没吃没喝的年代，即使是一块地瓜也要争来，拼尽全力为了填饱肚子可以继续活着，我们又有什么资格说放弃就放弃？    世上本没有路，走的人多了便成了路。&quot;生活亦是如此，生活本身没有意义，是活着的人赋予了生活意义。人生在世，不要过于计较得与失，多看看身边的风景，多看看身边的人，好好珍惜当下的人和事，即使是拼尽全力也要好好活着，活出自己的风采与风格，不仅仅是为了自己，更是为了身边美好的人和事。    人是为了活着而活着，而不是为活着之外的任何事物活着。</code></pre><h1 id="我的世界观"><a href="#我的世界观" class="headerlink" title="我的世界观"></a>我的世界观</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>治愈视频</title>
      <link href="/post/c500a527.html"/>
      <url>/post/c500a527.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">漫步在海边往事在脑海浮现</span><br><span class="line">记忆深处的夏天</span><br><span class="line">寻觅着沙滩你我铭刻的誓言</span><br><span class="line">如今早已消失不见</span><br><span class="line">绽放吧盛夏的烟花</span><br><span class="line">光芒伴随泪光飘洒</span><br><span class="line">只转一眼 童话帷幕已落下</span><br><span class="line">轻倚身旁的那个她</span><br><span class="line">描绘着未来的图画</span><br><span class="line">就让今夜永远定格在心中吧​</span><br></pre></td></tr></table></figure><div style="position: relative; padding: 30% 45%;margin-top: 10px;margin-bottom: 10px"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=753966497&bvid=BV1Nk4y1m7Tj&cid=215991800&page=1&danmaku=0&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于6月13日程序设计考试最后一道题</title>
      <link href="/post/79bbd6cd.html"/>
      <url>/post/79bbd6cd.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Date</span>;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Time</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Time</span>(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s);</span><br><span class="line">    <span class="function"><span class="type">void</span>  <span class="title">display</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> hour;</span><br><span class="line">    <span class="type">int</span> minute;</span><br><span class="line">    <span class="type">int</span> second;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">Time::<span class="built_in">Time</span>(<span class="type">int</span>  h, <span class="type">int</span>  m, <span class="type">int</span>  s) &#123;</span><br><span class="line">    hour = h;</span><br><span class="line">    minute = m;</span><br><span class="line">    second = s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Date</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Date</span>(<span class="type">int</span> m, <span class="type">int</span> d, <span class="type">int</span> y) ;</span><br><span class="line">    <span class="function"><span class="type">void</span>  <span class="title">display</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; month &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; year &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span>  day;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">Date::<span class="built_in">Date</span>(<span class="type">int</span>  m, <span class="type">int</span>  d, <span class="type">int</span>  y) &#123;</span><br><span class="line">    month = m;</span><br><span class="line">    day = d;</span><br><span class="line">    year = y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">display</span><span class="params">(<span class="type">const</span>  Date&amp; d, <span class="type">const</span>  Time&amp; t)</span> </span>&#123;</span><br><span class="line">    d.<span class="built_in">display</span>();</span><br><span class="line">    t.<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Time  <span class="title">t1</span><span class="params">(<span class="number">11</span>, <span class="number">25</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Date  <span class="title">d1</span><span class="params">(<span class="number">5</span>, <span class="number">21</span>, <span class="number">2021</span>)</span></span>;</span><br><span class="line">    <span class="built_in">display</span>(d1, t1);</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS的建议</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建议的话一个方向是抄常见的布局（页面看起来简单的都可以试试，或者手机布局也可以试着仿造），另一种方向是关注一个细节，比如像常见的各种组件，比如导航栏，菜单等等怎么实现.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
